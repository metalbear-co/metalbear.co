<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mehul Arora on </title>
    <link>http://localhost:54350/contributors/mehul-arora/</link>
    <description>Recent content in Mehul Arora on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Aug 2022 15:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:54350/contributors/mehul-arora/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hooking Go from Rust - Hitchhiker’s Guide to the Go-laxy</title>
      <link>http://localhost:54350/blog/hooking-go-from-rust-hitchhikers-guide-to-the-go-laxy/</link>
      <pubDate>Wed, 17 Aug 2022 15:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/hooking-go-from-rust-hitchhikers-guide-to-the-go-laxy/</guid>
      <description>&lt;p&gt;Most mainstream programming languages strive to fit into a few common standards, to increase interoperability and decrease adoption friction. Golang isn’t one of those (there &lt;a href=&#34;https://spectralops.io/blog/rust-vs-go-why-not-use-both/&#34;   target=&#34;_blank&#34; &gt;&#xA;    are&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://words.filippo.io/rustgo/&#34;   target=&#34;_blank&#34; &gt;&#xA;    several&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang&#34;   target=&#34;_blank&#34; &gt;&#xA;    articles&#xA;  &lt;/a&gt;&#xA;   on the subject). In this blog post we’ll demonstrate how to overcome Go’s isolationist design and integrate with it from another language (in our case Rust).&lt;/p&gt;&#xA;&lt;p&gt;Why do we need to interop with Go? mirrord&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; works by &lt;a href=&#34;https://metalbear.co/blog/mirrord-internals-hooking-libc-functions-in-rust-and-fixing-bugs/&#34;   target=&#34;_blank&#34; &gt;&#xA;    hooking system calls to the operating systems&#xA;  &lt;/a&gt;&#xA;   and applying logic that decides whether to execute locally or remotely. To do that, mirrord side-loads (using &lt;code&gt;LD_PRELOAD&lt;/code&gt;) into the process, then hooks relevant functions.&#xA;To cover most common scenarios, mirrord hooks libc functions and this works for most common languages (Python, Go on macOS, Rust, Node to name a few) as they all rely on libc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started With Ephemeral Containers</title>
      <link>http://localhost:54350/blog/getting-started-with-ephemeral-containers/</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/getting-started-with-ephemeral-containers/</guid>
      <description>&lt;p&gt;If you’re following the latest news on Kubernetes, you probably would have heard about Ephemeral Containers. Not sure? Fear not! In this blog post we will try to shed some light on this new feature soon to be stable&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in Kubernetes v1.25.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-ephemeral-containers&#34;&gt;What are Ephemeral Containers? &lt;a href=&#34;#what-are-ephemeral-containers&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/&#34;   target=&#34;_blank&#34; &gt;&#xA;    Ephemeral containers&#xA;  &lt;/a&gt;&#xA;   let us run a container with a specific image in the context of an already running container in a Pod. This comes in handy when debugging/troubleshooting distroless images or images that lack certain utilities, where &lt;code&gt;kubectl exec&lt;/code&gt; won’t be helpful.&lt;/p&gt;</description>
    </item>
    <item>
      <title>mirrord internals - hooking libc functions in Rust and fixing bugs</title>
      <link>http://localhost:54350/blog/mirrord-internals-hooking-libc-functions-in-rust-and-fixing-bugs/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/mirrord-internals-hooking-libc-functions-in-rust-and-fixing-bugs/</guid>
      <description>&lt;p&gt;&amp;ldquo;Is mirrord some kind of &lt;a href=&#34;https://man7.org/linux/man-pages/man2/ptrace.2.html&#34;   target=&#34;_blank&#34; &gt;&#xA;    ptrace&#xA;  &lt;/a&gt;&#xA;   magic?”, that’s what I exactly thought when I was introduced to this idea of “mirroring traffic”. To my surprise, the idea and design behind mirrord are based on simple concepts implemented in a novel way! This is what I want to discuss in this blog post along with my experience as a Junior Engineer learning how to tackle bugs working on this badass project.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
