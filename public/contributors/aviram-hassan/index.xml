<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aviram Hassan on </title>
    <link>http://localhost:54350/contributors/aviram-hassan/</link>
    <description>Recent content in Aviram Hassan on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:54350/contributors/aviram-hassan/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KubeCon 2024 Takeaways</title>
      <link>http://localhost:54350/blog/kubecon-2024-takeaways/</link>
      <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/kubecon-2024-takeaways/</guid>
      <description>&lt;p&gt;Last month marked a huge milestone for us as we attended our first KubeCon! This was KubeCon Europe, which took place in Paris, city of lights and cloud orchestration. Below is a summary of our collective impressions and insights.&lt;/p&gt;&#xA;&lt;h2 id=&#34;co-located-events-and-surprising-highlights&#34;&gt;Co-Located Events and Surprising Highlights &lt;a href=&#34;#co-located-events-and-surprising-highlights&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We arrived a day before KubeCon proper started so we could attend the co-located events. We ended up mostly going to AppDeveloperCon sessions, and it was surprisingly crowded. Our highlight from the first day was Daniel Bryant’s excellent talk &lt;strong&gt;“&lt;a href=&#34;https://www.youtube.com/watch?v=3tP31j_T6IE&#34;   target=&#34;_blank&#34; &gt;&#xA;    Testing Cloud Apps: Mocks vs. Service Virtualization vs. Remocal Tools&#xA;  &lt;/a&gt;&#xA;  ”&lt;/strong&gt;. Daniel covered our favorite pain - being unable to work against a real environment and iterate with it as part of the development workflow. We were pleased to see a very friendly shoutout to mirrord and our to talk later in the convention!&lt;/p&gt;</description>
    </item>
    <item>
      <title>On Pausing Containers - how we built, and why we deprecated, our container pause feature</title>
      <link>http://localhost:54350/blog/on-pausing-containers-how-we-built-and-why-we-deprecated-our-container-pause-feature/</link>
      <pubDate>Mon, 04 Mar 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/on-pausing-containers-how-we-built-and-why-we-deprecated-our-container-pause-feature/</guid>
      <description>&lt;p&gt;Did you know that you can ”freeze” running containers? We found out about this feature while developing a particularly handy capability for mirrord.&#xA;mirrord lets developers run local code in the context of a remote Kubernetes pod. This lets them test their code in cloud conditions without going through CI and deployment. In most cases, stealing or mirroring incoming traffic from the remote pod to the local process is good enough. However, when you have applications that consume tasks and do more than react to incoming requests, the user might want to &lt;a href=&#34;https://github.com/metalbear-co/mirrord/discussions/2016&#34;   target=&#34;_blank&#34; &gt;&#xA;    pause the remote application completely&#xA;  &lt;/a&gt;&#xA;  , so that it doesn’t compete with their local process for tasks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fun with macOS&#39;s SIP</title>
      <link>http://localhost:54350/blog/fun-with-macoss-sip/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/fun-with-macoss-sip/</guid>
      <description>&lt;p&gt;While developing mirrord, which heavily relies on injecting itself into other people&amp;rsquo;s binaries, we ran into some challenges posed by macOS’s SIP (System Integrity Protection). This post details how we ultimately overcame these challenges, and we hope it can be of help to other people hoping to learn about SIP, as we&amp;rsquo;ve learned the hard way that there&amp;rsquo;s very little written about this subject on the internet.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-mirrord&#34;&gt;What is mirrord? &lt;a href=&#34;#what-is-mirrord&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mirrord.dev&#34;   target=&#34;_blank&#34; &gt;&#xA;    mirrord&#xA;  &lt;/a&gt;&#xA;   lets you run a local process in the context of a cloud service, which means we can test our code on our staging cluster without actually deploying it there. This leads to shorter feedback loops (you don’t have to wait on long CI processes to test your code in staging conditions) and a more stable staging environment (since untested services aren’t being deployed there). There is a detailed overview of mirrord in &lt;a href=&#34;https://metalbear.co/blog/mirrord-3.0-is-out/&#34;   target=&#34;_blank&#34; &gt;&#xA;    this&#xA;  &lt;/a&gt;&#xA;   blog post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hooking Go from Rust - Hitchhiker’s Guide to the Go-laxy</title>
      <link>http://localhost:54350/blog/hooking-go-from-rust-hitchhikers-guide-to-the-go-laxy/</link>
      <pubDate>Wed, 17 Aug 2022 15:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/hooking-go-from-rust-hitchhikers-guide-to-the-go-laxy/</guid>
      <description>&lt;p&gt;Most mainstream programming languages strive to fit into a few common standards, to increase interoperability and decrease adoption friction. Golang isn’t one of those (there &lt;a href=&#34;https://spectralops.io/blog/rust-vs-go-why-not-use-both/&#34;   target=&#34;_blank&#34; &gt;&#xA;    are&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://words.filippo.io/rustgo/&#34;   target=&#34;_blank&#34; &gt;&#xA;    several&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang&#34;   target=&#34;_blank&#34; &gt;&#xA;    articles&#xA;  &lt;/a&gt;&#xA;   on the subject). In this blog post we’ll demonstrate how to overcome Go’s isolationist design and integrate with it from another language (in our case Rust).&lt;/p&gt;&#xA;&lt;p&gt;Why do we need to interop with Go? mirrord&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; works by &lt;a href=&#34;https://metalbear.co/blog/mirrord-internals-hooking-libc-functions-in-rust-and-fixing-bugs/&#34;   target=&#34;_blank&#34; &gt;&#xA;    hooking system calls to the operating systems&#xA;  &lt;/a&gt;&#xA;   and applying logic that decides whether to execute locally or remotely. To do that, mirrord side-loads (using &lt;code&gt;LD_PRELOAD&lt;/code&gt;) into the process, then hooks relevant functions.&#xA;To cover most common scenarios, mirrord hooks libc functions and this works for most common languages (Python, Go on macOS, Rust, Node to name a few) as they all rely on libc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Starting a Backend Developers Community</title>
      <link>http://localhost:54350/blog/starting-a-backend-developers-community/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/starting-a-backend-developers-community/</guid>
      <description>&lt;p&gt;Hey all, this blog post is a bit meta. tl;dr - we’re starting a &lt;a href=&#34;https://discord.gg/metalbear&#34;   target=&#34;_blank&#34; &gt;&#xA;    backend developers community on Discord&#xA;  &lt;/a&gt;&#xA;  . Its purpose is to have a place for backend developers to have discussions, share ideas, and collaborate.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-need-another-community&#34;&gt;Why do we need another community? &lt;a href=&#34;#why-do-we-need-another-community&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Most developer communities are dedicated to languages (Go, Python, Rust) or frameworks (FastAPI, Tokio). However, most modern backend developers work on complex cloud architectures combining multiple languages and ecosystems, and this is only becoming more common as microservice architectures become more prevalent. The modern backend engineer is a &lt;a href=&#34;https://medium.com/soluto-nashville/why-be-a-polyglot-software-engineer-29cf53465d15&#34;   target=&#34;_blank&#34; &gt;&#xA;    polyglot&#xA;  &lt;/a&gt;&#xA;  , making them more versatile and equipped to solve a wider array of problems. Besides, backend developers face many common issues &lt;em&gt;unrelated&lt;/em&gt; to the language or ecosystem they use - things to do with architecture, databases and other third party services, CI/CD and SDLC, even development methodology and team management.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Carcinisation of mirrord (or: why we use Rust)</title>
      <link>http://localhost:54350/blog/carcinisation-of-mirrord-or-why-we-use-rust/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/carcinisation-of-mirrord-or-why-we-use-rust/</guid>
      <description>&lt;p&gt;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;http://localhost:54350/blog/carcinisation-of-mirrord-or-why-we-use-rust/rustacean-flat-happy.svg&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;strong&gt;Carcinisation&lt;/strong&gt; (or &lt;strong&gt;carcinization&lt;/strong&gt;) is an example of &lt;a href=&#34;https://en.wikipedia.org/wiki/Convergent_evolution&#34;   target=&#34;_blank&#34; &gt;&#xA;    convergent evolution&#xA;  &lt;/a&gt;&#xA;   in which a &lt;a href=&#34;https://en.wikipedia.org/wiki/Crustacean&#34;   target=&#34;_blank&#34; &gt;&#xA;    crustacean&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://en.wikipedia.org/wiki/Evolution&#34;   target=&#34;_blank&#34; &gt;&#xA;    evolves&#xA;  &lt;/a&gt;&#xA;   into a &lt;a href=&#34;https://en.wikipedia.org/wiki/Crab&#34;   target=&#34;_blank&#34; &gt;&#xA;    crab&#xA;  &lt;/a&gt;&#xA;  -like form from a non-crab-like form. (source: &lt;a href=&#34;https://en.wikipedia.org/wiki/Carcinisation&#34;   target=&#34;_blank&#34; &gt;&#xA;    Wikipedia&#xA;  &lt;/a&gt;&#xA;  ).&lt;/p&gt;&#xA;&lt;p&gt;A classic example of carcinisation is MetalBear&amp;rsquo;s mirrord project, where several different components converged on Rust as their main language. In this post, we&amp;rsquo;ll detail their different evolutionary paths and explain why they ended up being written in Rust.&lt;/p&gt;&#xA;&lt;h1 id=&#34;first-of-all-what-is-mirrord&#34;&gt;First of all, what is mirrord? &lt;a href=&#34;#first-of-all-what-is-mirrord&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;mirrord is an open-source tool that lets developers run local processes in the context of their cloud environment. It is meant to provide the benefits of running your service in a cloud environment (e.g. staging) without going through the hassle of actually deploying it there, and without disrupting the environment by deploying untested code.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metal-who?</title>
      <link>http://localhost:54350/blog/metal-who/</link>
      <pubDate>Thu, 12 May 2022 09:19:42 +0100</pubDate>
      <guid>http://localhost:54350/blog/metal-who/</guid>
      <description>&lt;h1 id=&#34;metalbear&#34;&gt;MetalBear!🐻 &lt;a href=&#34;#metalbear&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;A huge omnivore that also conducts electricity. In the present context, though, a new startup that’s working on developing a new toolset for backend engineers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-&#34;&gt;Why ⏪ &lt;a href=&#34;#why-&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Like many devtools startups, MetalBear was born out of frustration. We&amp;rsquo;ve both spent years building cloud services, splitting up monoliths, wrangling configurations, writing endless tests only to break production because of that one edge case.&lt;/p&gt;&#xA;&lt;p&gt;We finally came to the realization that while tools tailored to devops engineers, frontend developers, QA engineers, and more, we, the backend developers, were being underserved. So much of our day to day work seemed needlessly slow or complicated, begging for automation or even fundamental disruption, and yet no company seemed willing to rise up to the challenge. So we decided to start MetalBear 🐻&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
