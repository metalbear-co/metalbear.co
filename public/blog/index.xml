<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on </title>
    <link>http://localhost:54350/blog/</link>
    <description>Recent content in Blog on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 07 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:54350/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Four KubeCon &#43; CloudNativeCon Schedules for Four Types of Attendees</title>
      <link>http://localhost:54350/blog/four-kubecon--cloudnativecon-schedules-for-four-types-of-attendees/</link>
      <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/four-kubecon--cloudnativecon-schedules-for-four-types-of-attendees/</guid>
      <description>&lt;p&gt;KubeCon is one of those huge events where so much is happening, and so much is happening at the same time. If you don&amp;rsquo;t&#xA;plan in advance, you&amp;rsquo;re very likely to miss out on some events that would have been interesting for you. Our first tip&#xA;is: don’t worry too much about missing talks, as all talks will be recorded and uploaded to YouTube shortly after the&#xA;event. Social events, workshops, discussions etc. cannot be caught up later.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Discover mirrord’s approach to fast, cloud-connected local dev at KubeCon</title>
      <link>http://localhost:54350/blog/discover-mirrords-approach-to-fast-cloud-connected-local-dev-at-kubecon/</link>
      <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/discover-mirrords-approach-to-fast-cloud-connected-local-dev-at-kubecon/</guid>
      <description>&lt;p&gt;We get it—“Another blog about a company’s KubeCon booth?” These posts can be a bit predictable. So, we’ll keep this one brief and focused on how &lt;a href=&#34;https://mirrord.dev/&#34;   target=&#34;_blank&#34; &gt;&#xA;    mirrord&#xA;  &lt;/a&gt;&#xA;   can actually make cloud development easier.&lt;/p&gt;&#xA;&lt;p&gt;As one CTO put it, “&lt;em&gt;at our company, mirrord is doing as much for developer productivity as AI is&lt;/em&gt;.” That’s high praise, and while we’re not here to boast, we do think it’s worth checking out if you’re looking for a smoother development process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>There and Back Again: Port Forwarding with mirrord</title>
      <link>http://localhost:54350/blog/there-and-back-again-port-forwarding-with-mirrord/</link>
      <pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/there-and-back-again-port-forwarding-with-mirrord/</guid>
      <description>&lt;h3 id=&#34;port-forwarding-in-the-wild&#34;&gt;Port forwarding in the wild &lt;a href=&#34;#port-forwarding-in-the-wild&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Port forwarding via SSH, also called SSH tunneling, is a method for communicating securely over an insecure connection. In this way sensitive info can be transmitted over the internet, for example to access your company&amp;rsquo;s testing environment data from home.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:54350/blog/there-and-back-again-port-forwarding-with-mirrord/ssh-port-forwarding.png&#34;&#xA;    alt=&#34;diagram of SSH port forwarding&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;More recently, port forwarding might also refer to &lt;code&gt;kubectl port-forward&lt;/code&gt;, allowing the user to forward traffic into a Kubernetes cluster from a local port by going through the Kubernetes API. This is a faster way to access a pod without having to write special configuration to set up ingress or a service, but is generally considered “just good enough” for lightweight debugging.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Split Queues To Share Cloud Development Environments</title>
      <link>http://localhost:54350/blog/split-queues-to-share-cloud-development-environments/</link>
      <pubDate>Tue, 01 Oct 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/split-queues-to-share-cloud-development-environments/</guid>
      <description>&lt;p&gt;One of the reasons &lt;a href=&#34;https://mirrord.dev/docs/overview/teams/&#34;   target=&#34;_blank&#34; &gt;&#xA;    mirrord for Teams&#xA;  &lt;/a&gt;&#xA;   is a gamechanger for many&#xA;organizations is that it makes it possible for a whole team to work with one shared cloud environment. They don’t&#xA;need to run the whole environment for each developer, they don’t need to have their entire architecture running on&#xA;their laptops, and they don&amp;rsquo;t need to redeploy to Kubernetes to test new code or debug it. Developers just press&#xA;“run” in their IDE, and their code is executed &lt;a href=&#34;https://mirrord.dev/&#34;   target=&#34;_blank&#34; &gt;&#xA;    remocally&#xA;  &lt;/a&gt;&#xA;  : the code runs locally, but with&#xA;access to any required resources in the Kubernetes cluster or outside of it. With mirrord for Teams, developers can&#xA;even work on the same service at the same time, and control how to divide between them consumable data like&#xA;incoming HTTP requests, and now also queue messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bear in Mind #1: Platform Engineering</title>
      <link>http://localhost:54350/blog/bear-in-mind-1/</link>
      <pubDate>Mon, 22 Jul 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/bear-in-mind-1/</guid>
      <description>&lt;p&gt;      At MetalBear we build open-source dev tools for backend developers, which puts our domain at the intersection of some pretty interesting topics. There&amp;rsquo;s still a lot of great content being written about things that aren&amp;rsquo;t AI - things like Kubernetes, DevEx, Open Source, Rust, and more - and we go through a lot of it as part of our daily work. How easy it would then be, we collectively thought, to provide our growing community of curious but busy backend developers with a periodic, curated list of our favorite pieces of writing on these topics?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Validation at Scale with Open Source MVPs</title>
      <link>http://localhost:54350/blog/validation-at-scale-with-open-source-mvps/</link>
      <pubDate>Sun, 14 Jul 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/validation-at-scale-with-open-source-mvps/</guid>
      <description>&lt;p&gt;      Minimum Viable Products (MVPs) are generally accepted as the right way to kickstart a product startup. It’s easy - you whip up a quick prototype, get it in front of some users, and boom - you’ve got some feedback plus an initial user base. All that’s left to do is iterate for a few years until you reach Unicorn status. What’s often left unaddressed in this version of the story is - &lt;em&gt;how do you get users for your MVP, and in a large enough amount that their feedback isn’t skewed or overfitted&lt;/em&gt;?&lt;/p&gt;</description>
    </item>
    <item>
      <title>mirrord for Teams – a Step Into the Remocal Future</title>
      <link>http://localhost:54350/blog/mirrord-for-teams-a-step-into-the-remocal-future/</link>
      <pubDate>Mon, 17 Jun 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/mirrord-for-teams-a-step-into-the-remocal-future/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;http://localhost:54350/blog/mirrord-for-teams-a-step-into-the-remocal-future/mftlaunch.png&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;      Today we’re excited to announce that after two years of development on mirrord Open Source, our tool that enables Remocal development for Backend engineers, we’re releasing &lt;em&gt;mirrord for Teams&lt;/em&gt; to bring that awesome power to entire Engineering organizations. If you’re new to the term, Remocal development combines the best of both worlds of the dominant modern cloud software engineering paradigms – &lt;em&gt;Remote&lt;/em&gt; development, where you maintain no local environment and everything is cloud dependent, and &lt;em&gt;Local&lt;/em&gt; development, where you develop software on your computer, sync code to staging and production, and test. &lt;em&gt;Remocal&lt;/em&gt; development allows developers to work locally while their process &lt;em&gt;thinks&lt;/em&gt; it is running remotely on Staging – and it’s done via a bit of magic we call mirrord. If a tool for shortened software development lifecycles and better collaboration for backend developers, packaged as an enterprise-ready platform with security and governance features included could help you, read on – we think you’ll be very interested in &lt;em&gt;mirrord for Teams&lt;/em&gt;. But first, a bit about how we got there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubeCon 2024 Takeaways</title>
      <link>http://localhost:54350/blog/kubecon-2024-takeaways/</link>
      <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/kubecon-2024-takeaways/</guid>
      <description>&lt;p&gt;Last month marked a huge milestone for us as we attended our first KubeCon! This was KubeCon Europe, which took place in Paris, city of lights and cloud orchestration. Below is a summary of our collective impressions and insights.&lt;/p&gt;&#xA;&lt;h2 id=&#34;co-located-events-and-surprising-highlights&#34;&gt;Co-Located Events and Surprising Highlights &lt;a href=&#34;#co-located-events-and-surprising-highlights&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;We arrived a day before KubeCon proper started so we could attend the co-located events. We ended up mostly going to AppDeveloperCon sessions, and it was surprisingly crowded. Our highlight from the first day was Daniel Bryant’s excellent talk &lt;strong&gt;“&lt;a href=&#34;https://www.youtube.com/watch?v=3tP31j_T6IE&#34;   target=&#34;_blank&#34; &gt;&#xA;    Testing Cloud Apps: Mocks vs. Service Virtualization vs. Remocal Tools&#xA;  &lt;/a&gt;&#xA;  ”&lt;/strong&gt;. Daniel covered our favorite pain - being unable to work against a real environment and iterate with it as part of the development workflow. We were pleased to see a very friendly shoutout to mirrord and our to talk later in the convention!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparison of Internal Developer Platforms</title>
      <link>http://localhost:54350/blog/comparison-of-internal-developer-platforms/</link>
      <pubDate>Fri, 22 Mar 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/comparison-of-internal-developer-platforms/</guid>
      <description>&lt;p&gt;DevOps emerged to address the need for better developer productivity and a more efficient development lifecycle. However, DevOps teams often find themselves bogged down by operational tasks like security, scaling, and infrastructure management. The demand for robust developer platforms continues to grow, and with the rise of cloud computing, organizations struggle to keep pace with the complexities and speed involved. This is where Internal Developer Platforms (IDPs) come in – a trendy concept in Platform Engineering that promises to streamline processes and boost developer productivity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On Pausing Containers - how we built, and why we deprecated, our container pause feature</title>
      <link>http://localhost:54350/blog/on-pausing-containers-how-we-built-and-why-we-deprecated-our-container-pause-feature/</link>
      <pubDate>Mon, 04 Mar 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/on-pausing-containers-how-we-built-and-why-we-deprecated-our-container-pause-feature/</guid>
      <description>&lt;p&gt;Did you know that you can ”freeze” running containers? We found out about this feature while developing a particularly handy capability for mirrord.&#xA;mirrord lets developers run local code in the context of a remote Kubernetes pod. This lets them test their code in cloud conditions without going through CI and deployment. In most cases, stealing or mirroring incoming traffic from the remote pod to the local process is good enough. However, when you have applications that consume tasks and do more than react to incoming requests, the user might want to &lt;a href=&#34;https://github.com/metalbear-co/mirrord/discussions/2016&#34;   target=&#34;_blank&#34; &gt;&#xA;    pause the remote application completely&#xA;  &lt;/a&gt;&#xA;  , so that it doesn’t compete with their local process for tasks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Five Talks We&#39;re Waiting for at KubeCon Europe 2024</title>
      <link>http://localhost:54350/blog/five-talks-were-waiting-for-at-kubecon-europe-2024/</link>
      <pubDate>Thu, 22 Feb 2024 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/five-talks-were-waiting-for-at-kubecon-europe-2024/</guid>
      <description>&lt;p&gt;Bonjour Kubernauts! Kubecon Europe is less than a month away, and it’s coming to the city of lights. The MetalBear team will be joining the fun in Paris this year, and we’ve prepared a list of five talks that we’re particularly excited about.&lt;/p&gt;&#xA;&lt;figure class=&#34;center mid-width&#34;&gt;&lt;img src=&#34;http://localhost:54350/blog/five-talks-were-waiting-for-at-kubecon-europe-2024/kubecon-paris.png&#34;&#xA;    alt=&#34;mirrord at KubeCon Europe 2024&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;whats-new-at-kubecon-this-year&#34;&gt;What’s New at KubeCon This Year? &lt;a href=&#34;#whats-new-at-kubecon-this-year&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Every year, the event unveils transformative tech trends that are making waves in the tech ecosystem, causing end-users, developers, engineers, and stakeholders to reflect on the past and how these trends can impact their future.&#xA;KubeCon + CloudNativeCon 2024 promises to spotlight several groundbreaking projects that have flourished within the Kubernetes ecosystem. Unsurprisingly, the main buzzword this year is AI.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scaling Out Development Environments</title>
      <link>http://localhost:54350/blog/scaling-out-development-environments/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/scaling-out-development-environments/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Cross-posted from &lt;a href=&#34;https://audacioustux.com/Scaling-Out-Development-Environment-ceb823260a1f4a10b717a87e998480de&#34;   target=&#34;_blank&#34; &gt;&#xA;    https://audacioustux.com/Scaling-Out-Development-Environment-ceb823260a1f4a10b717a87e998480de&#xA;  &lt;/a&gt;&#xA;  &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Once upon a time, there was LAMP Stack… &lt;strong&gt;L&lt;/strong&gt;inux, &lt;strong&gt;A&lt;/strong&gt;pache, &lt;strong&gt;M&lt;/strong&gt;ysql, &lt;strong&gt;P&lt;/strong&gt;hp/&lt;strong&gt;P&lt;/strong&gt;ython/&lt;strong&gt;P&lt;/strong&gt;erl - That’s what I’ve used to start my Software Engineering journey. Things were simple, in a sense that there were less “options” to choose from. But today, I have to deploy multiple types of databases, event store + processing pipeline, and other behemoths to work on my application locally.&lt;/p&gt;&#xA;&lt;p&gt;Well, maybe I can use docker-compose to keep things clean and tidy, re-producible for the other team members, but what about the compute resources usage? I don’t know about the M2/M3 users out there, but my Linux laptop either halts or burns my lap.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Traffic Police 🚨 - Controlling outgoing traffic with mirrord</title>
      <link>http://localhost:54350/blog/the-traffic-police-controlling-outgoing-traffic-with-mirrord/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/the-traffic-police-controlling-outgoing-traffic-with-mirrord/</guid>
      <description>&lt;p&gt;So, you&amp;rsquo;ve been using mirrord to simplify your development process (if you haven’t, go &lt;a href=&#34;https://mirrord.dev/&#34;   target=&#34;_blank&#34; &gt;&#xA;    here!&#xA;  &lt;/a&gt;&#xA;  ). Naturally, you want the traffic from the app you&amp;rsquo;re debugging to go through the cluster environment, so your app can communicate with its &lt;em&gt;clustery&lt;/em&gt; pals. There is a problem though: your latest change adds some new columns to the database, and you don’t want to modify the database in the cluster and affect everyone else working on it. You do have a local instance of the database that you can modify, so your app can use that, but you still want it to talk to all the other components in the cluster.  So what now? The new &lt;strong&gt;outgoing traffic filter&lt;/strong&gt; feature is here to solve exactly this type of problem!&lt;/p&gt;</description>
    </item>
    <item>
      <title>mirrord as an alternative to Telepresence</title>
      <link>http://localhost:54350/blog/mirrord-as-an-alternative-to-telepresence/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/mirrord-as-an-alternative-to-telepresence/</guid>
      <description>&lt;p&gt;A question that comes up often from those already familiar with local Kubernetes development is how mirrord compares to Telepresence. The idea at the base of both products is indeed similar: instead of deploying your new code to the cloud and testing it there, connect it to the cloud from your local machine. By shifting left on cloud testing this way you utilize your cloud environment much more effectively and speed up your development process. The people at Ambassador Labs &lt;a href=&#34;https://www.getambassador.io/docs/telepresence-oss/latest/concepts/devworkflow&#34;   target=&#34;_blank&#34; &gt;&#xA;    wrote about it at length&#xA;  &lt;/a&gt;&#xA;  .&lt;/p&gt;</description>
    </item>
    <item>
      <title>Easy K8S Connectivity for Local Utils</title>
      <link>http://localhost:54350/blog/easy-k8s-connectivity-for-local-utils/</link>
      <pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/easy-k8s-connectivity-for-local-utils/</guid>
      <description>&lt;p&gt;With the new targetless mode of mirrord, you can run a program locally on your machine, and mirrord will forward&#xA;network connections initiated by the program to the cluster, such that the program gets the connectivity it would&#xA;have if it were deployed to the cluster. Together with the secret sauce of in-cluster DNS resolution, you can run a&#xA;program on your computer and have it access cluster-internal services that do not have any external IP. The&#xA;program would also have access to third-party services that are open to IPs from your cluster, but not to your&#xA;local IP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing a Kubernetes Operator</title>
      <link>http://localhost:54350/blog/writing-a-kubernetes-operator/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/writing-a-kubernetes-operator/</guid>
      <description>&lt;p&gt;As part of mirrord For Teams, we wanted to build a persistent component that would run in our user’s cluster and synchronize independent uses of mirrord. It quickly became apparent that we needed a component that was both:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Kubernetes-native&lt;/strong&gt; - meaning it leverages the Kubernetes APIs and ecosystem&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cluster-synchronized&lt;/strong&gt; - Manage and synchronize the use of our open-source project, mirrord, from the cluster’s point of view.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Some research pointed us in the direction of the Kubernetes Operator/Controller pattern.&#xA;The operator pattern can be quite ambiguous, and we found the guides that currently exist for it to be quite dense and technical. In this post, I want to instead take a step-by-step approach and provide a quick start for newcomers looking to explore the operator pattern.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fun with macOS&#39;s SIP</title>
      <link>http://localhost:54350/blog/fun-with-macoss-sip/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/fun-with-macoss-sip/</guid>
      <description>&lt;p&gt;While developing mirrord, which heavily relies on injecting itself into other people&amp;rsquo;s binaries, we ran into some challenges posed by macOS’s SIP (System Integrity Protection). This post details how we ultimately overcame these challenges, and we hope it can be of help to other people hoping to learn about SIP, as we&amp;rsquo;ve learned the hard way that there&amp;rsquo;s very little written about this subject on the internet.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-mirrord&#34;&gt;What is mirrord? &lt;a href=&#34;#what-is-mirrord&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mirrord.dev&#34;   target=&#34;_blank&#34; &gt;&#xA;    mirrord&#xA;  &lt;/a&gt;&#xA;   lets you run a local process in the context of a cloud service, which means we can test our code on our staging cluster without actually deploying it there. This leads to shorter feedback loops (you don’t have to wait on long CI processes to test your code in staging conditions) and a more stable staging environment (since untested services aren’t being deployed there). There is a detailed overview of mirrord in &lt;a href=&#34;https://metalbear.co/blog/mirrord-3.0-is-out/&#34;   target=&#34;_blank&#34; &gt;&#xA;    this&#xA;  &lt;/a&gt;&#xA;   blog post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Approaches in Cloud Development Ergonomics</title>
      <link>http://localhost:54350/blog/approaches-in-cloud-development-ergonomics/</link>
      <pubDate>Mon, 31 Oct 2022 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/approaches-in-cloud-development-ergonomics/</guid>
      <description>&lt;p&gt;The advent of microservice architectures and cloud-native has taken some pretty severe tolls on developer ergonomics. It feels as if the tools cloud developers have at their disposal haven’t evolved fast enough to keep up with the rapid progress in infrastructure, and this tool debt is readily apparent in the day-to-day of the modern developer.&lt;/p&gt;&#xA;&lt;p&gt;The clearest example of this is that it’s now &lt;strong&gt;really hard to just run your application&lt;/strong&gt;. Not the one microservice you’re currently working on, but your actual entire application, which you ultimately deploy to the cloud and serves your customers. You used to be able to fire up your monolith right there on your laptop from within your IDE (crash, change some code, run it again), but architectures today have become resource-intensive, reliant on third-party services, and mostly just plain convoluted to the point where local execution is no longer a viable option.&lt;/p&gt;</description>
    </item>
    <item>
      <title>mirrord 3.0 is out!</title>
      <link>http://localhost:54350/blog/mirrord-3.0-is-out/</link>
      <pubDate>Thu, 20 Oct 2022 06:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/mirrord-3.0-is-out/</guid>
      <description>&lt;p&gt;Today we’re very excited to launch the first full, stable version of mirrord! Full because it’s the first version where mirrord completely wraps your process in the context of your Kubernetes cluster - it connects everything, from network traffic to file access to environment variables, so that you can keep running your process from the familiar comfort of your local environment, but with input, configuration, and state from the cloud.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hooking Go from Rust - Hitchhiker’s Guide to the Go-laxy</title>
      <link>http://localhost:54350/blog/hooking-go-from-rust-hitchhikers-guide-to-the-go-laxy/</link>
      <pubDate>Wed, 17 Aug 2022 15:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/hooking-go-from-rust-hitchhikers-guide-to-the-go-laxy/</guid>
      <description>&lt;p&gt;Most mainstream programming languages strive to fit into a few common standards, to increase interoperability and decrease adoption friction. Golang isn’t one of those (there &lt;a href=&#34;https://spectralops.io/blog/rust-vs-go-why-not-use-both/&#34;   target=&#34;_blank&#34; &gt;&#xA;    are&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://words.filippo.io/rustgo/&#34;   target=&#34;_blank&#34; &gt;&#xA;    several&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang&#34;   target=&#34;_blank&#34; &gt;&#xA;    articles&#xA;  &lt;/a&gt;&#xA;   on the subject). In this blog post we’ll demonstrate how to overcome Go’s isolationist design and integrate with it from another language (in our case Rust).&lt;/p&gt;&#xA;&lt;p&gt;Why do we need to interop with Go? mirrord&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; works by &lt;a href=&#34;https://metalbear.co/blog/mirrord-internals-hooking-libc-functions-in-rust-and-fixing-bugs/&#34;   target=&#34;_blank&#34; &gt;&#xA;    hooking system calls to the operating systems&#xA;  &lt;/a&gt;&#xA;   and applying logic that decides whether to execute locally or remotely. To do that, mirrord side-loads (using &lt;code&gt;LD_PRELOAD&lt;/code&gt;) into the process, then hooks relevant functions.&#xA;To cover most common scenarios, mirrord hooks libc functions and this works for most common languages (Python, Go on macOS, Rust, Node to name a few) as they all rely on libc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Starting a Backend Developers Community</title>
      <link>http://localhost:54350/blog/starting-a-backend-developers-community/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/starting-a-backend-developers-community/</guid>
      <description>&lt;p&gt;Hey all, this blog post is a bit meta. tl;dr - we’re starting a &lt;a href=&#34;https://discord.gg/metalbear&#34;   target=&#34;_blank&#34; &gt;&#xA;    backend developers community on Discord&#xA;  &lt;/a&gt;&#xA;  . Its purpose is to have a place for backend developers to have discussions, share ideas, and collaborate.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-need-another-community&#34;&gt;Why do we need another community? &lt;a href=&#34;#why-do-we-need-another-community&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Most developer communities are dedicated to languages (Go, Python, Rust) or frameworks (FastAPI, Tokio). However, most modern backend developers work on complex cloud architectures combining multiple languages and ecosystems, and this is only becoming more common as microservice architectures become more prevalent. The modern backend engineer is a &lt;a href=&#34;https://medium.com/soluto-nashville/why-be-a-polyglot-software-engineer-29cf53465d15&#34;   target=&#34;_blank&#34; &gt;&#xA;    polyglot&#xA;  &lt;/a&gt;&#xA;  , making them more versatile and equipped to solve a wider array of problems. Besides, backend developers face many common issues &lt;em&gt;unrelated&lt;/em&gt; to the language or ecosystem they use - things to do with architecture, databases and other third party services, CI/CD and SDLC, even development methodology and team management.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started With Ephemeral Containers</title>
      <link>http://localhost:54350/blog/getting-started-with-ephemeral-containers/</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/getting-started-with-ephemeral-containers/</guid>
      <description>&lt;p&gt;If you’re following the latest news on Kubernetes, you probably would have heard about Ephemeral Containers. Not sure? Fear not! In this blog post we will try to shed some light on this new feature soon to be stable&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in Kubernetes v1.25.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-ephemeral-containers&#34;&gt;What are Ephemeral Containers? &lt;a href=&#34;#what-are-ephemeral-containers&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/&#34;   target=&#34;_blank&#34; &gt;&#xA;    Ephemeral containers&#xA;  &lt;/a&gt;&#xA;   let us run a container with a specific image in the context of an already running container in a Pod. This comes in handy when debugging/troubleshooting distroless images or images that lack certain utilities, where &lt;code&gt;kubectl exec&lt;/code&gt; won’t be helpful.&lt;/p&gt;</description>
    </item>
    <item>
      <title>mirrord internals - hooking libc functions in Rust and fixing bugs</title>
      <link>http://localhost:54350/blog/mirrord-internals-hooking-libc-functions-in-rust-and-fixing-bugs/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/mirrord-internals-hooking-libc-functions-in-rust-and-fixing-bugs/</guid>
      <description>&lt;p&gt;&amp;ldquo;Is mirrord some kind of &lt;a href=&#34;https://man7.org/linux/man-pages/man2/ptrace.2.html&#34;   target=&#34;_blank&#34; &gt;&#xA;    ptrace&#xA;  &lt;/a&gt;&#xA;   magic?”, that’s what I exactly thought when I was introduced to this idea of “mirroring traffic”. To my surprise, the idea and design behind mirrord are based on simple concepts implemented in a novel way! This is what I want to discuss in this blog post along with my experience as a Junior Engineer learning how to tackle bugs working on this badass project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Carcinisation of mirrord (or: why we use Rust)</title>
      <link>http://localhost:54350/blog/carcinisation-of-mirrord-or-why-we-use-rust/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/carcinisation-of-mirrord-or-why-we-use-rust/</guid>
      <description>&lt;p&gt;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;http://localhost:54350/blog/carcinisation-of-mirrord-or-why-we-use-rust/rustacean-flat-happy.svg&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;strong&gt;Carcinisation&lt;/strong&gt; (or &lt;strong&gt;carcinization&lt;/strong&gt;) is an example of &lt;a href=&#34;https://en.wikipedia.org/wiki/Convergent_evolution&#34;   target=&#34;_blank&#34; &gt;&#xA;    convergent evolution&#xA;  &lt;/a&gt;&#xA;   in which a &lt;a href=&#34;https://en.wikipedia.org/wiki/Crustacean&#34;   target=&#34;_blank&#34; &gt;&#xA;    crustacean&#xA;  &lt;/a&gt;&#xA;   &lt;a href=&#34;https://en.wikipedia.org/wiki/Evolution&#34;   target=&#34;_blank&#34; &gt;&#xA;    evolves&#xA;  &lt;/a&gt;&#xA;   into a &lt;a href=&#34;https://en.wikipedia.org/wiki/Crab&#34;   target=&#34;_blank&#34; &gt;&#xA;    crab&#xA;  &lt;/a&gt;&#xA;  -like form from a non-crab-like form. (source: &lt;a href=&#34;https://en.wikipedia.org/wiki/Carcinisation&#34;   target=&#34;_blank&#34; &gt;&#xA;    Wikipedia&#xA;  &lt;/a&gt;&#xA;  ).&lt;/p&gt;&#xA;&lt;p&gt;A classic example of carcinisation is MetalBear&amp;rsquo;s mirrord project, where several different components converged on Rust as their main language. In this post, we&amp;rsquo;ll detail their different evolutionary paths and explain why they ended up being written in Rust.&lt;/p&gt;&#xA;&lt;h1 id=&#34;first-of-all-what-is-mirrord&#34;&gt;First of all, what is mirrord? &lt;a href=&#34;#first-of-all-what-is-mirrord&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;mirrord is an open-source tool that lets developers run local processes in the context of their cloud environment. It is meant to provide the benefits of running your service in a cloud environment (e.g. staging) without going through the hassle of actually deploying it there, and without disrupting the environment by deploying untested code.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>(Re)Introducing mirrord</title>
      <link>http://localhost:54350/blog/reintroducing-mirrord/</link>
      <pubDate>Mon, 30 May 2022 15:00:00 +0000</pubDate>
      <guid>http://localhost:54350/blog/reintroducing-mirrord/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;http://localhost:54350/blog/reintroducing-mirrord/mirrord.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;the-dev-loop-or-know-your-enemy&#34;&gt;The Dev Loop (or: know your enemy) &lt;a href=&#34;#the-dev-loop-or-know-your-enemy&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;http://localhost:54350/blog/reintroducing-mirrord/loop.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Imagine you’re a backend developer at post series B SaaS soonicorn. You’ve spent half a sprint adding a new feature to your microservice. You’ve thoroughly researched possible inputs and database states and built an elaborate test suite. Your code was mercilessly reviewed by two of your teammates. Finally, the tests pass, the pull request is approved, and as a final verification, you deploy your new code to the staging environment…&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metal-who?</title>
      <link>http://localhost:54350/blog/metal-who/</link>
      <pubDate>Thu, 12 May 2022 09:19:42 +0100</pubDate>
      <guid>http://localhost:54350/blog/metal-who/</guid>
      <description>&lt;h1 id=&#34;metalbear&#34;&gt;MetalBear!🐻 &lt;a href=&#34;#metalbear&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;A huge omnivore that also conducts electricity. In the present context, though, a new startup that’s working on developing a new toolset for backend engineers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-&#34;&gt;Why ⏪ &lt;a href=&#34;#why-&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Like many devtools startups, MetalBear was born out of frustration. We&amp;rsquo;ve both spent years building cloud services, splitting up monoliths, wrangling configurations, writing endless tests only to break production because of that one edge case.&lt;/p&gt;&#xA;&lt;p&gt;We finally came to the realization that while tools tailored to devops engineers, frontend developers, QA engineers, and more, we, the backend developers, were being underserved. So much of our day to day work seemed needlessly slow or complicated, begging for automation or even fundamental disruption, and yet no company seemed willing to rise up to the challenge. So we decided to start MetalBear 🐻&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
